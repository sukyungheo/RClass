iris
iris_train <- iris[1:105,]
iris_test  <- iris[106:150,]
iris_train <- iris[1:105,]   # 70% 학습용
iris_test  <- iris[106:150,] # 30% 평가용
idx <- sample(1:nrow(iris), size=nrow(iris)*0.7, replace=F) # 무작위 샘플 비복원 추출
iris_train <- iris[idx,]
iris_test  <- iris[-idx,]
idx <- sample(1:nrow(iris), size=nrow(iris)*0.7, replace=F) # 무작위 샘플 비복원 추출
iris_train <- iris[idx,]
iris_test  <- iris[-idx,]
dim(iris_train); dim(iris_test)
iris$Species
table(iris$Species)
table(iris_train$Species)
table(iris_test$Species)
library(caret)
help(createDataPartition)
indexTrain <- createDataPartition(iris$Species, p=.7, list=F)
str(indexTrain)
indexTrain$Resample1
str(indexTrain)
indexTrain$Resample1
str(indexTrain)
indexTrain
indexTrain[1]
indexTrain[1]
indexTrain[,1]
indexTrain
length(indexTrain)
library(caret)
help(createDataPartition)
indexTrain <- createDataPartition(iris$Species, p=.7, list=F)
str(indexTrain)
indexTrain[,1]
indexTrain
length(indexTrain)
iris_train <- iris[indexTrain, ]
iris_test <- iris[-indexTrain,]
dim(iris_test$Species)
dim(iris_train$Species);
dim(iris_test$Species)
table(iris_train$Species);
table(iris_test$Species);
library(e1071) # 나이브 베이즈 기법 적용하기 위한 e1071 패키지 로드
library(e1071) # 나이브 베이즈 기법 적용하기 위한 e1071 패키지 로드
naive.result<-naiveBayes(iris_train, iris_train$Species,laplace=1)
table(naive.pred, iris_test$Species) #분류 결과 도출
library(e1071) # 나이브 베이즈 기법 적용하기 위한 e1071 패키지 로드
naive.result<-naiveBayes(iris_train, iris_train$Species,laplace=1)
table(naive.pred, iris_test$Species) #분류 결과 도출
library(e1071) # 나이브 베이즈 기법 적용하기 위한 e1071 패키지 로드
naive.result<-naiveBayes(iris_train, iris_train$Species,laplace=1)
naive.pred<-predict(naive.result, iris_test, type="class")
table(naive.pred, iris_test$Species) #분류 결과 도출
library(e1071) # 나이브 베이즈 기법 적용하기 위한 e1071 패키지 로드
naive.result<-naiveBayes(iris_train, iris_train$Species,laplace=1)
naive.pred<-predict(naive.result, iris_test, type="class")
table(naive.pred, iris_test$Species) #분류 결과 도출
confusionMatrix(naive.pred, iris_test$Species)
indexTrain <- createDataPartition(iris$Species, p=0.7, list=F)
str(indexTrain)
indexTrain[,1]
indexTrain[,1]
indexTrain
length(indexTrain)
length(indexTrain)
iris_train <- iris[indexTrain, ]
iris_train <- iris[indexTrain, ]
iris_test <- iris[-indexTrain,]
library(ROCR)
pred3 <- prediction(naive.pred , labels)
plot(performance(pred3 , "tpr" , "fpr"))
plot(performance(naive.pred , "tpr" , "fpr"))
naive.pred<-predict(naive.result, iris_test, type="response")
help(predict)
naive.pred<-predict(naive.result, iris_test, type="response")
library(nnet) #다항 로지스틱 회귀를 사용하기 위한 nnet 패키지 로딩
multi.result<-multinom(Species~., iris_train) #훈련 데이터 통한 모형 적합
multi.pred<-predict(multi.result, iris_test) #테스트 데이터 이용한 평가
table(multi.pred, iris_test$Species) #분류 결과도출
confusionMatrix(naive.pred, iris_test$Species)
library(nnet) #인공 신경망 기법을 사용하기 위한 nnet 패키지 로딩
library(nnet) #인공 신경망 기법을 사용하기 위한 nnet 패키지 로딩
iris_train_scale<-as.data.frame(sapply(iris_train[,-5], scale)) #데이터표준화
iris_test_scale<-as.data.frame(sapply(iris_test[,-5], scale))
iris_train_scale$Species<-iris_train$Species
iris_test_scale$Species<-iris_test$Species
nnet.result<-nnet(Species~., iris_train_scale, size=3) #훈련데이터 통한 모형 적합
nnet.pred<-predict(nnet.result, iris_test_scale, type="class") #테스트 데이터 평가
table(nnet.pred, iris_test$Species) #분류 결과도출
